# Script de test d'installation USB Video Vault
# Usage: .\test-installation.ps1 [-SetupPath "path"] [-FullTest] [-CleanUninstall]

param(
    [string]$SetupPath = ".\dist\USB Video Vault Setup 0.1.4.exe",
    [switch]$FullTest,
    [switch]$CleanUninstall
)

$ErrorActionPreference = "Continue"

Write-Host "=== Test d'installation USB Video Vault ===" -ForegroundColor Cyan
Write-Host "Setup: $SetupPath" -ForegroundColor Gray
Write-Host ""

# Fonction de v√©rification de l'√©tat
function Test-InstallationState {
    $installed = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*USB Video Vault*" }
    $processRunning = Get-Process "USB Video Vault" -ErrorAction SilentlyContinue
    $installPath = "$env:ProgramFiles\USB Video Vault"

    return @{
        WmiProduct = $installed
        ProcessRunning = $processRunning
        InstallPath = $installPath
        FilesPresent = Test-Path $installPath
    }
}

# 1. √âtat initial
Write-Host "1. üìã √âtat initial du syst√®me:" -ForegroundColor Yellow
$initialState = Test-InstallationState
if ($initialState.WmiProduct) {
    Write-Host "‚ö†Ô∏è  Application d√©j√† install√©e: $($initialState.WmiProduct.Name)" -ForegroundColor Yellow
    if ($CleanUninstall) {
        Write-Host "üßπ D√©sinstallation pr√©alable..." -ForegroundColor Yellow
        $initialState.WmiProduct.Uninstall() | Out-Null
        Start-Sleep -Seconds 3
    }
} else {
    Write-Host "‚úÖ Syst√®me propre - aucune installation d√©tect√©e" -ForegroundColor Green
}

if ($initialState.ProcessRunning) {
    Write-Host "‚ö†Ô∏è  Processus en cours d'ex√©cution - arr√™t..." -ForegroundColor Yellow
    Stop-Process -Name "USB Video Vault" -Force -ErrorAction SilentlyContinue
}

# 2. V√©rification du setup
Write-Host "`n2. üîç V√©rification du setup:" -ForegroundColor Yellow
if (-not (Test-Path $SetupPath)) {
    Write-Error "‚ùå Fichier setup introuvable: $SetupPath"
    exit 1
}

$setupInfo = Get-Item $SetupPath
$setupHash = (Get-FileHash $SetupPath -Algorithm SHA256).Hash
$setupSize = [math]::Round($setupInfo.Length / 1MB, 2)

Write-Host "‚úÖ Fichier: $($setupInfo.Name)" -ForegroundColor Green
Write-Host "üìä Taille: ${setupSize}MB" -ForegroundColor Gray
Write-Host "üîê SHA256: $setupHash" -ForegroundColor Gray

# V√©rifier signature (si certificat pr√©sent)
try {
    $signature = Get-AuthenticodeSignature $SetupPath
    if ($signature.Status -eq "Valid") {
        Write-Host "‚úÖ Signature num√©rique valide" -ForegroundColor Green
        Write-Host "üìú Certificat: $($signature.SignerCertificate.Subject)" -ForegroundColor Gray
    } elseif ($signature.Status -eq "NotSigned") {
        Write-Host "‚ö†Ô∏è  Fichier non sign√©" -ForegroundColor Yellow
    } else {
        Write-Host "‚ùå Signature invalide: $($signature.Status)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ö†Ô∏è  Impossible de v√©rifier la signature" -ForegroundColor Yellow
}

# 3. Installation silencieuse
Write-Host "`n3. üì¶ Installation silencieuse:" -ForegroundColor Yellow
Write-Host "Commande: `"$SetupPath`" /S" -ForegroundColor Gray

$installStart = Get-Date
try {
    $process = Start-Process -FilePath $SetupPath -ArgumentList "/S" -Wait -PassThru
    $installDuration = (Get-Date) - $installStart

    if ($process.ExitCode -eq 0) {
        Write-Host "‚úÖ Installation termin√©e avec succ√®s" -ForegroundColor Green
        Write-Host "‚è±Ô∏è  Dur√©e: $([math]::Round($installDuration.TotalSeconds, 1))s" -ForegroundColor Gray
    } else {
        Write-Host "‚ùå Installation √©chou√©e - Code: $($process.ExitCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur lors de l'installation: $($_.Exception.Message)" -ForegroundColor Red
}

# 4. V√©rification post-installation
Write-Host "`n4. ‚úÖ V√©rification post-installation:" -ForegroundColor Yellow
Start-Sleep -Seconds 2  # Attendre la finalisation

$postInstall = Test-InstallationState

# V√©rifier WMI/Registry
if ($postInstall.WmiProduct) {
    Write-Host "‚úÖ Produit enregistr√©: $($postInstall.WmiProduct.Name)" -ForegroundColor Green
    Write-Host "üìù Version: $($postInstall.WmiProduct.Version)" -ForegroundColor Gray
} else {
    Write-Host "‚ùå Produit non trouv√© dans WMI" -ForegroundColor Red
}

# V√©rifier fichiers
if ($postInstall.FilesPresent) {
    Write-Host "‚úÖ Dossier d'installation pr√©sent" -ForegroundColor Green
    $mainExe = "$($postInstall.InstallPath)\USB Video Vault.exe"
    $uninstaller = "$($postInstall.InstallPath)\Uninstall USB Video Vault.exe"

    if (Test-Path $mainExe) {
        $exeInfo = Get-Item $mainExe
        Write-Host "‚úÖ Ex√©cutable principal: $([math]::Round($exeInfo.Length/1MB,1))MB" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Ex√©cutable principal manquant" -ForegroundColor Red
    }

    if (Test-Path $uninstaller) {
        Write-Host "‚úÖ D√©sinstallateur pr√©sent" -ForegroundColor Green
    } else {
        Write-Host "‚ùå D√©sinstallateur manquant" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Dossier d'installation manquant" -ForegroundColor Red
}

# 5. Test de lancement (si demand√©)
if ($FullTest) {
    Write-Host "`n5. üöÄ Test de lancement:" -ForegroundColor Yellow

    try {
        $mainExe = "$($postInstall.InstallPath)\USB Video Vault.exe"
        if (Test-Path $mainExe) {
            $appProcess = Start-Process -FilePath $mainExe -PassThru
            Start-Sleep -Seconds 3

            if ($appProcess -and -not $appProcess.HasExited) {
                Write-Host "‚úÖ Application lanc√©e avec succ√®s (PID: $($appProcess.Id))" -ForegroundColor Green

                # V√©rifier la fen√™tre
                $windowTitle = (Get-Process -Id $appProcess.Id -ErrorAction SilentlyContinue).MainWindowTitle
                if ($windowTitle) {
                    Write-Host "‚úÖ Fen√™tre principale: '$windowTitle'" -ForegroundColor Green
                }

                # Arr√™ter l'application apr√®s test
                Write-Host "üõë Arr√™t de l'application..." -ForegroundColor Gray
                Stop-Process -Id $appProcess.Id -Force -ErrorAction SilentlyContinue
            } else {
                Write-Host "‚ùå Application ferm√©e imm√©diatement" -ForegroundColor Red
            }
        }
    } catch {
        Write-Host "‚ùå Erreur de lancement: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 6. Test de d√©sinstallation (si demand√©)
if ($FullTest -and $postInstall.FilesPresent) {
    Write-Host "`n6. üóëÔ∏è  Test de d√©sinstallation:" -ForegroundColor Yellow

    $uninstaller = "$($postInstall.InstallPath)\Uninstall USB Video Vault.exe"
    if (Test-Path $uninstaller) {
        Write-Host "Commande: `"$uninstaller`" /S" -ForegroundColor Gray

        try {
            $uninstallProcess = Start-Process -FilePath $uninstaller -ArgumentList "/S" -Wait -PassThru
            Start-Sleep -Seconds 2

            if ($uninstallProcess.ExitCode -eq 0) {
                Write-Host "‚úÖ D√©sinstallation termin√©e" -ForegroundColor Green

                # V√©rifier la suppression
                if (-not (Test-Path $postInstall.InstallPath)) {
                    Write-Host "‚úÖ Dossier d'installation supprim√©" -ForegroundColor Green
                } else {
                    Write-Host "‚ö†Ô∏è  Dossier d'installation toujours pr√©sent" -ForegroundColor Yellow
                }

                $finalState = Test-InstallationState
                if (-not $finalState.WmiProduct) {
                    Write-Host "‚úÖ Produit supprim√© du registre" -ForegroundColor Green
                } else {
                    Write-Host "‚ö†Ô∏è  Produit toujours dans le registre" -ForegroundColor Yellow
                }
            } else {
                Write-Host "‚ùå D√©sinstallation √©chou√©e - Code: $($uninstallProcess.ExitCode)" -ForegroundColor Red
            }
        } catch {
            Write-Host "‚ùå Erreur de d√©sinstallation: $($_.Exception.Message)" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ùå D√©sinstallateur introuvable" -ForegroundColor Red
    }
}

# R√©sum√© final
Write-Host "`n=== R√âSUM√â DU TEST ===" -ForegroundColor Cyan
$finalState = Test-InstallationState

if ($FullTest) {
    Write-Host "Test complet termin√©" -ForegroundColor Green
} else {
    Write-Host "Test d'installation termin√©" -ForegroundColor Green
    Write-Host "Pour un test complet: -FullTest" -ForegroundColor Gray
}

Write-Host "üìÅ √âtat final:" -ForegroundColor Yellow
if ($finalState.WmiProduct) {
    Write-Host "   ‚Ä¢ Application install√©e: $($finalState.WmiProduct.Name)" -ForegroundColor Green
} else {
    Write-Host "   ‚Ä¢ Application non install√©e" -ForegroundColor Gray
}

if ($finalState.FilesPresent) {
    Write-Host "   ‚Ä¢ Fichiers pr√©sents: $($finalState.InstallPath)" -ForegroundColor Green
} else {
    Write-Host "   ‚Ä¢ Fichiers absents" -ForegroundColor Gray
}

Write-Host "`nüéØ Commandes recommand√©es:" -ForegroundColor Blue
Write-Host "   ‚Ä¢ Test basique: .\test-installation.ps1" -ForegroundColor White
Write-Host "   ‚Ä¢ Test complet: .\test-installation.ps1 -FullTest" -ForegroundColor White
Write-Host "   ‚Ä¢ Nettoyage: .\test-installation.ps1 -CleanUninstall" -ForegroundColor White
