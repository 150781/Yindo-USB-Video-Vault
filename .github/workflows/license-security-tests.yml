# GitHub Actions Workflow
# CI/CD - Tests de S√©curit√© Licence USB Video Vault

name: License Security Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Tests quotidiens √† 2h du matin UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Permettre d√©clenchement manuel

env:
  NODE_VERSION: '18'
  VAULT_PATH: 'test-vault'

jobs:
  license-security-tests:
    name: Tests de S√©curit√© Licence
    runs-on: windows-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        test-scenario:
          - valid-license
          - invalid-signature  
          - expired-license
      fail-fast: false
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: Verify Project Structure
        run: |
          echo "üìÅ V√©rification structure projet..."
          if (-not (Test-Path "scripts/make-license.mjs")) {
            throw "Script make-license.mjs manquant"
          }
          if (-not (Test-Path "tests/license-security.test.js")) {
            throw "Script de test license-security.test.js manquant"
          }
          Write-Host "‚úÖ Structure projet valide"
        shell: pwsh
        
      - name: Setup Test Environment
        run: |
          echo "üîß Configuration environnement de test..."
          
          # Cr√©er environnement de test isol√©
          New-Item -Path "$env:VAULT_PATH" -ItemType Directory -Force
          New-Item -Path "$env:VAULT_PATH\.vault" -ItemType Directory -Force
          New-Item -Path "test-results" -ItemType Directory -Force
          New-Item -Path "out" -ItemType Directory -Force
          
          # Variables d'environnement pour les tests
          echo "VAULT_PATH=$env:VAULT_PATH" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          echo "APP_EXECUTABLE=dist/win-unpacked/USB Video Vault.exe" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          echo "CI=true" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          
          Write-Host "‚úÖ Environnement de test configur√©"
        shell: pwsh
        
      - name: Build Application
        run: |
          echo "üî® Build de l'application..."
          npm run build
          
          # V√©rifier que l'app est build√©e (optionnel pour les tests de licence)
          if (Test-Path "dist") {
            Write-Host "‚úÖ Application build√©e avec succ√®s"
          } else {
            Write-Host "‚ö†Ô∏è Build non trouv√©, les tests de licence continueront"
          }
        shell: pwsh
        
      - name: Run License Security Tests
        run: |
          echo "üß™ Ex√©cution tests s√©curit√© licence..."
          npm run test:license-security
        env:
          VAULT_PATH: ${{ env.VAULT_PATH }}
          APP_EXECUTABLE: ${{ env.APP_EXECUTABLE }}
          CI: true
        shell: pwsh
        
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-test-results-${{ matrix.test-scenario }}
          path: |
            test-results/
            ${{ env.VAULT_PATH }}/
          retention-days: 30
          
      - name: Upload Test Logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: license-test-logs-${{ matrix.test-scenario }}-${{ github.run_number }}
          path: |
            test-results/
            out/
            *.log
          retention-days: 7

  aggregate-results:
    name: Agr√©gation R√©sultats
    runs-on: windows-latest
    needs: license-security-tests
    if: always()
    
    steps:
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: license-test-results-*
          merge-multiple: true
          path: all-results/
          
      - name: Analyze Results
        run: |
          echo "üìä Analyse des r√©sultats de tests..."
          
          $resultFiles = Get-ChildItem -Path "all-results" -Filter "*.json" -Recurse
          $totalTests = 0
          $passedTests = 0
          $failedTests = 0
          
          foreach ($file in $resultFiles) {
            try {
              $result = Get-Content $file.FullName | ConvertFrom-Json
              $totalTests += $result.summary.totalTests
              $passedTests += $result.summary.passedTests
              $failedTests += $result.summary.failedTests
              
              Write-Host "üìÑ $($file.Name): $($result.summary.passedTests)/$($result.summary.totalTests) r√©ussis"
            } catch {
              Write-Host "‚ö†Ô∏è Erreur lecture $($file.Name): $($_.Exception.Message)"
            }
          }
          
          $successRate = if ($totalTests -gt 0) { [math]::Round(($passedTests / $totalTests) * 100, 2) } else { 0 }
          
          Write-Host ""
          Write-Host "üéØ R√âSULTATS GLOBAUX:"
          Write-Host "   Total tests: $totalTests"
          Write-Host "   R√©ussis: $passedTests"
          Write-Host "   √âchou√©s: $failedTests"
          Write-Host "   Taux de r√©ussite: $successRate%"
          
          # Sauvegarder r√©sum√© pour badge
          $summary = @{
            totalTests = $totalTests
            passedTests = $passedTests
            failedTests = $failedTests
            successRate = $successRate
            timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
            status = if ($failedTests -eq 0) { "SUCCESS" } else { "FAILURE" }
          } | ConvertTo-Json
          
          Set-Content -Path "test-summary.json" -Value $summary
          
          # D√©finir le statut de sortie
          if ($failedTests -gt 0) {
            Write-Host "‚ùå √âCHEC: $failedTests test(s) ont √©chou√©"
            exit 1
          } else {
            Write-Host "‚úÖ SUCC√àS: Tous les tests de s√©curit√© licence passent"
            exit 0
          }
        shell: pwsh
        
      - name: Upload Aggregated Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-security-summary
          path: |
            test-summary.json
            all-results/
          retention-days: 90

  notification:
    name: Notification R√©sultats
    runs-on: ubuntu-latest
    needs: [license-security-tests, aggregate-results]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'push')
    
    steps:
      - name: Notify Results
        run: |
          echo "üìß Notification des r√©sultats..."
          
          if [[ "${{ needs.aggregate-results.result }}" == "success" ]]; then
            echo "‚úÖ Tous les tests de s√©curit√© licence ont r√©ussi"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Certains tests de s√©curit√© licence ont √©chou√©"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "D√©clencheur: ${{ github.event_name }}"
        id: notification
        
      - name: Create Issue on Failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'üö® √âchec Tests S√©curit√© Licence - ' + new Date().toISOString().split('T')[0];
            const body = `
            ## üö® Tests de S√©curit√© Licence √âchou√©s
            
            **D√©tails:**
            - Commit: \`${{ github.sha }}\`
            - Branch: \`${{ github.ref_name }}\`
            - Date: ${new Date().toISOString()}
            - Workflow: ${{ github.workflow }}
            
            **Actions requises:**
            1. Examiner les logs de test dans les artefacts
            2. V√©rifier l'int√©grit√© du syst√®me de licence
            3. Corriger les probl√®mes identifi√©s
            4. Re-ex√©cuter les tests
            
            **Liens utiles:**
            - [Logs de test](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Documentation](docs/CI_LICENSE_SECURITY_TESTS.md)
            
            ---
            *Ticket cr√©√© automatiquement par le workflow CI*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'security', 'license', 'ci-failure']
            });

# Configuration des badges de statut
# Ajouter dans le README.md:
# [![License Security Tests](https://github.com/OWNER/REPO/workflows/License%20Security%20Tests/badge.svg)](https://github.com/OWNER/REPO/actions?query=workflow%3A%22License+Security+Tests%22)