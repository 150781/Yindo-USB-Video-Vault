#!/usr/bin/env node
/**
 * üß™ Tests QA Complets - Syst√®me de Licence
 * Validation automatis√©e de tous les sc√©narios critiques
 */

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { readFileSync, writeFileSync, unlinkSync, existsSync, mkdirSync } from 'fs';
import { execSync } from 'child_process';
import crypto from 'crypto';

const __dirname = dirname(fileURLToPath(import.meta.url));
const rootDir = dirname(__dirname);

// Configuration test
const TEST_CONFIG = {
    timeout: 5000,
    testVault: join(rootDir, 'test-vault-qa'),
    validFingerprint: 'ba33ce761a01ec2b5ae8edb62ffb4bab',
    invalidFingerprint: 'invalid123',
    privateKey: '9657aecb25a8726326966ace9c10fded875391c7bb6c738564d89986e1121fb5879c35f5ae011c56528c27abb0f5b61539bf0d134158ec56ac4e8b8dd08c9d78'
};

let testResults = {
    passed: 0,
    failed: 0,
    errors: []
};

// Utilitaires
function log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    const emoji = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warn' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    console.log(`${emoji} [${timestamp}] ${message}`);
}

function assert(condition, message) {
    if (condition) {
        testResults.passed++;
        log(`PASS: ${message}`, 'success');
        return true;
    } else {
        testResults.failed++;
        testResults.errors.push(message);
        log(`FAIL: ${message}`, 'error');
        return false;
    }
}

function setupTestEnvironment() {
    log('üîß Setup environnement de test...');
    
    // Nettoyer et cr√©er dossier test
    if (existsSync(TEST_CONFIG.testVault)) {
        execSync(`rmdir /s /q "${TEST_CONFIG.testVault}"`, { stdio: 'ignore' });
    }
    mkdirSync(TEST_CONFIG.testVault, { recursive: true });
    mkdirSync(join(TEST_CONFIG.testVault, '.vault'), { recursive: true });
    
    log('‚úÖ Environnement test pr√™t');
}

function cleanupTestEnvironment() {
    log('üßπ Nettoyage environnement test...');
    try {
        if (existsSync(TEST_CONFIG.testVault)) {
            execSync(`rmdir /s /q "${TEST_CONFIG.testVault}"`, { stdio: 'ignore' });
        }
        log('‚úÖ Nettoyage termin√©');
    } catch (error) {
        log(`‚ö†Ô∏è Erreur nettoyage: ${error.message}`, 'warn');
    }
}

function runCommand(command, expectSuccess = true) {
    try {
        const result = execSync(command, { 
            encoding: 'utf-8',
            cwd: rootDir,
            env: { 
                ...process.env, 
                PACKAGER_PRIVATE_HEX: TEST_CONFIG.privateKey 
            }
        });
        if (expectSuccess) {
            return { success: true, output: result };
        } else {
            return { success: false, output: result };
        }
    } catch (error) {
        if (!expectSuccess) {
            return { success: true, output: error.message };
        } else {
            return { success: false, output: error.message };
        }
    }
}

// Tests de g√©n√©ration
function testLicenseGeneration() {
    log('üìù Tests g√©n√©ration de licence...');
    
    // Test 1.1: G√©n√©ration standard
    const result = runCommand(`node scripts/make-license.mjs "${TEST_CONFIG.validFingerprint}" --kid 1 --exp "2025-12-31T23:59:59Z" --out "${TEST_CONFIG.testVault}"`);
    assert(result.success && result.output.includes('LICENCE G√âN√âR√âE AVEC SUCC√àS'), 'G√©n√©ration licence standard');
    
    // V√©rifier fichiers cr√©√©s
    const licenseBin = join(TEST_CONFIG.testVault, '.vault', 'license.bin');
    const licenseJson = join(TEST_CONFIG.testVault, 'license.json');
    assert(existsSync(licenseBin), 'Fichier license.bin cr√©√©');
    assert(existsSync(licenseJson), 'Fichier license.json cr√©√©');
    
    // Test 1.2: Fingerprint invalide
    const invalidResult = runCommand(`node scripts/make-license.mjs "${TEST_CONFIG.invalidFingerprint}" --kid 1 --exp "2025-12-31T23:59:59Z" --out "${TEST_CONFIG.testVault}"`, false);
    assert(!invalidResult.success || invalidResult.output.includes('erreur'), 'Rejet fingerprint invalide');
    
    // Test 1.3: Kid inexistant
    const invalidKidResult = runCommand(`node scripts/make-license.mjs "${TEST_CONFIG.validFingerprint}" --kid 999 --exp "2025-12-31T23:59:59Z" --out "${TEST_CONFIG.testVault}"`, false);
    assert(!invalidKidResult.success || invalidKidResult.output.includes('erreur'), 'Rejet kid inexistant');
    
    // Test 1.4: Date expiration pass√©e
    const expiredResult = runCommand(`node scripts/make-license.mjs "${TEST_CONFIG.validFingerprint}" --kid 1 --exp "2020-01-01T00:00:00Z" --out "${TEST_CONFIG.testVault}"`, false);
    assert(!expiredResult.success || expiredResult.output.includes('erreur'), 'Rejet date expiration pass√©e');
}

// Tests de validation
function testLicenseValidation() {
    log('üîç Tests validation de licence...');
    
    // G√©n√©rer licence valide pour les tests
    runCommand(`node scripts/make-license.mjs "${TEST_CONFIG.validFingerprint}" --kid 1 --exp "2025-12-31T23:59:59Z" --out "${TEST_CONFIG.testVault}"`);
    
    // Test 2.1: Validation licence valide
    const validResult = runCommand(`node scripts/verify-license.mjs "${TEST_CONFIG.testVault}"`);
    assert(validResult.success && validResult.output.includes('‚úÖ'), 'Validation licence valide');
    
    // Test 2.2: Corruption fichier
    const licenseBin = join(TEST_CONFIG.testVault, '.vault', 'license.bin');
    const originalContent = readFileSync(licenseBin, 'utf-8');
    writeFileSync(licenseBin, 'corrupted_data');
    
    const corruptedResult = runCommand(`node scripts/verify-license.mjs "${TEST_CONFIG.testVault}"`, false);
    assert(!corruptedResult.success || corruptedResult.output.includes('‚ùå'), 'Rejet licence corrompue');
    
    // Restaurer fichier
    writeFileSync(licenseBin, originalContent);
    
    // Test 2.3: Fichier manquant
    unlinkSync(licenseBin);
    const missingResult = runCommand(`node scripts/verify-license.mjs "${TEST_CONFIG.testVault}"`, false);
    assert(!missingResult.success || missingResult.output.includes('‚ùå'), 'Rejet fichier manquant');
}

// Tests anti-rollback
function testAntiRollback() {
    log('üîí Tests anti-rollback...');
    
    // G√©n√©rer licence initiale
    runCommand(`node scripts/make-license.mjs "${TEST_CONFIG.validFingerprint}" --kid 1 --exp "2025-12-31T23:59:59Z" --out "${TEST_CONFIG.testVault}"`);
    
    // Simuler state file avec expiration future
    const stateFile = join(TEST_CONFIG.testVault, '.license_state.json');
    const futureState = {
        lastValidation: new Date().toISOString(),
        lastExpiration: '2026-12-31T23:59:59Z',
        validationCount: 1
    };
    writeFileSync(stateFile, JSON.stringify(futureState, null, 2));
    
    // Tenter licence avec expiration ant√©rieure
    runCommand(`node scripts/make-license.mjs "${TEST_CONFIG.validFingerprint}" --kid 1 --exp "2025-06-01T23:59:59Z" --out "${TEST_CONFIG.testVault}"`);
    
    // Note: Test complet n√©cessiterait int√©gration avec le code principal
    // Pour l'instant, on v√©rifie que les fichiers sont en place
    assert(existsSync(stateFile), 'State file anti-rollback pr√©sent');
}

// Tests de performance
function testPerformance() {
    log('‚ö° Tests performance...');
    
    // G√©n√©rer licence pour test
    runCommand(`node scripts/make-license.mjs "${TEST_CONFIG.validFingerprint}" --kid 1 --exp "2025-12-31T23:59:59Z" --out "${TEST_CONFIG.testVault}"`);
    
    // Test temps de validation
    const startTime = Date.now();
    const result = runCommand(`node scripts/verify-license.mjs "${TEST_CONFIG.testVault}"`);
    const duration = Date.now() - startTime;
    
    assert(result.success, 'Validation r√©ussie pour test performance');
    assert(duration < 2000, `Validation < 2s (${duration}ms)`);
    
    log(`üìä Temps validation: ${duration}ms`);
}

// Tests s√©curit√©
function testSecurity() {
    log('üõ°Ô∏è Tests s√©curit√©...');
    
    // Test: Pas de cl√© priv√©e dans les logs
    const result = runCommand(`node scripts/make-license.mjs "${TEST_CONFIG.validFingerprint}" --kid 1 --exp "2025-12-31T23:59:59Z" --out "${TEST_CONFIG.testVault}"`);
    assert(!result.output.includes(TEST_CONFIG.privateKey), 'Cl√© priv√©e non expos√©e dans logs');
    
    // Test: Fingerprint tronqu√© dans logs
    assert(result.output.includes('ba33ce76...') || result.output.includes('ba33ce76'), 'Fingerprint tronqu√© ou masqu√©');
    
    // Test: Pas de signature compl√®te dans logs
    assert(!result.output.includes('signature:') || result.output.includes('...'), 'Signature tronqu√©e dans logs');
}

// Rapport final
function generateReport() {
    log('\nüìä RAPPORT FINAL QA');
    log('='.repeat(50));
    log(`‚úÖ Tests r√©ussis: ${testResults.passed}`);
    log(`‚ùå Tests √©chou√©s: ${testResults.failed}`);
    log(`üìà Taux de r√©ussite: ${((testResults.passed / (testResults.passed + testResults.failed)) * 100).toFixed(1)}%`);
    
    if (testResults.failed > 0) {
        log('\n‚ùå √âCHECS D√âTECT√âS:');
        testResults.errors.forEach((error, index) => {
            log(`   ${index + 1}. ${error}`);
        });
        log('\nüö® RELEASE BLOQU√âE - Corriger les erreurs avant d√©ploiement');
        process.exit(1);
    } else {
        log('\nüéâ TOUS LES TESTS PASSENT');
        log('‚úÖ Syst√®me pr√™t pour la production');
        process.exit(0);
    }
}

// Ex√©cution principale
async function main() {
    log('üß™ D√©marrage Tests QA Complets - Syst√®me de Licence');
    log('='.repeat(60));
    
    try {
        setupTestEnvironment();
        
        // Ex√©cuter toutes les suites de test
        testLicenseGeneration();
        testLicenseValidation();
        testAntiRollback();
        testPerformance();
        testSecurity();
        
    } catch (error) {
        log(`üí• Erreur fatale: ${error.message}`, 'error');
        testResults.failed++;
        testResults.errors.push(`Erreur fatale: ${error.message}`);
    } finally {
        cleanupTestEnvironment();
        generateReport();
    }
}

// Lancement
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(console.error);
}

export { main as runQATests };