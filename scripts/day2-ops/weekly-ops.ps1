# üìÖ Weekly Security & Maintenance Script
# Tests s√©curit√© hebdomadaires + audit sant√© syst√®me

param(
    [Parameter(Mandatory=$false)]
    [switch]$SecurityOnly = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$ReportsOnly = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$All = $true
)

$ErrorActionPreference = "Continue"

Write-Host "üìÖ === WEEKLY OPS - S√©curit√© & Maintenance ===" -ForegroundColor Cyan
Write-Host "üóìÔ∏è Semaine du: $(Get-Date -Format 'yyyy-MM-dd')" -ForegroundColor Gray

function Test-WeeklySecurity {
    Write-Host "`nüîí === TESTS S√âCURIT√â HEBDOMADAIRES ===" -ForegroundColor Red
    
    $securityPassed = $true
    
    # 1. Tests sc√©narios rouges (√©checs attendus)
    Write-Host "üî¥ Tests sc√©narios rouges..." -ForegroundColor Yellow
    try {
        $redTestOutput = node test-red-scenarios.mjs 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Tous les sc√©narios d'attaque sont bloqu√©s" -ForegroundColor Green
            Write-Host "üõ°Ô∏è S√©curit√© valid√©e" -ForegroundColor Green
        } else {
            Write-Host "‚ùå ALERTE: Tests rouges √©chou√©s !" -ForegroundColor Red
            Write-Host $redTestOutput -ForegroundColor Red
            $securityPassed = $false
            
            # Alerter √©quipe s√©curit√©
            Write-Host "üö® ACTION CRITIQUE: Notifier √©quipe s√©curit√© imm√©diatement" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Erreur ex√©cution tests rouges: $($_.Exception.Message)" -ForegroundColor Red
        $securityPassed = $false
    }
    
    # 2. Scan APIs crypto d√©pr√©ci√©es
    Write-Host "`nüîç Scan APIs crypto d√©pr√©ci√©es..." -ForegroundColor Yellow
    try {
        $deprecatedAPIs = git grep -r "createCipher\|createDecipher\|crypto\.createHash\('md5'\)" src/ 2>$null
        if ($deprecatedAPIs) {
            Write-Host "‚ùå APIs crypto d√©pr√©ci√©es d√©tect√©es:" -ForegroundColor Red
            $deprecatedAPIs | ForEach-Object { Write-Host "   $_" -ForegroundColor Red }
            $securityPassed = $false
            
            Write-Host "üîß ACTION REQUISE: Remplacer par APIs modernes" -ForegroundColor Yellow
        } else {
            Write-Host "‚úÖ Aucune API crypto d√©pr√©ci√©e trouv√©e" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ö†Ô∏è Git grep non disponible - v√©rification manuelle requise" -ForegroundColor Yellow
    }
    
    # 3. Audit d√©pendances npm
    Write-Host "`nüì¶ Audit d√©pendances npm..." -ForegroundColor Yellow
    try {
        $auditOutput = npm audit --audit-level=high 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Aucune vuln√©rabilit√© critique d√©tect√©e" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Vuln√©rabilit√©s d√©tect√©es:" -ForegroundColor Yellow
            Write-Host $auditOutput -ForegroundColor Yellow
            Write-Host "üîß ACTION: Review et mise √† jour requises" -ForegroundColor Blue
            
            # Pas critique mais √† surveiller
        }
    } catch {
        Write-Host "‚ùå Erreur audit npm: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # 4. V√©rification int√©grit√© builds
    Write-Host "`nüîç V√©rification int√©grit√© builds..." -ForegroundColor Yellow
    
    $buildFiles = Get-ChildItem "dist\USB-Video-Vault-*.exe" -ErrorAction SilentlyContinue
    if ($buildFiles) {
        foreach ($build in $buildFiles) {
            # Hash SHA256
            $hash = (certutil -hashfile $build.FullName SHA256 | Select-String -Pattern "^[0-9a-f]{64}$").Line
            Write-Host "üìä $($build.Name): $hash" -ForegroundColor Gray
            
            # V√©rifier signature si pr√©sente
            try {
                $sig = Get-AuthenticodeSignature $build.FullName
                if ($sig.Status -eq "Valid") {
                    Write-Host "‚úÖ Signature valide" -ForegroundColor Green
                } elseif ($sig.Status -eq "NotSigned") {
                    Write-Host "‚ÑπÔ∏è Non sign√© (normal en dev)" -ForegroundColor Gray
                } else {
                    Write-Host "‚ö†Ô∏è Signature invalide: $($sig.Status)" -ForegroundColor Yellow
                }
            } catch {
                Write-Host "‚ö†Ô∏è Erreur v√©rification signature" -ForegroundColor Yellow
            }
        }
    } else {
        Write-Host "‚ÑπÔ∏è Aucun build trouv√© dans dist/" -ForegroundColor Gray
    }
    
    return $securityPassed
}

function New-WeeklyReports {
    Write-Host "`nüìä === RAPPORTS HEBDOMADAIRES ===" -ForegroundColor Blue
    
    $weekNumber = Get-Date -UFormat %V
    $year = Get-Date -Format yyyy
    $reportDate = Get-Date -Format "yyyy-MM-dd"
    
    # Cr√©er dossier rapports
    $reportsDir = "reports\weekly"
    if (!(Test-Path $reportsDir)) {
        New-Item -ItemType Directory -Path $reportsDir -Force | Out-Null
    }
    
    # 1. Rapport licences
    Write-Host "üìã G√©n√©ration rapport licences..." -ForegroundColor White
    $licenseReport = "$reportsDir\licenses-week$weekNumber-$year.txt"
    
    $licenseStats = node tools/license-management/license-manager.mjs stats 2>$null
    @"
=== RAPPORT LICENCES HEBDOMADAIRE ===
Semaine: $weekNumber/$year
Date: $reportDate

STATISTIQUES:
$licenseStats

ACTIONS REQUISES:
$(if ($licenseStats -match "expiring_soon:\s*([1-9]\d*)") { "‚ö†Ô∏è $($matches[1]) licence(s) expirent bient√¥t - Contacter clients" } else { "‚úÖ Aucune action licence requise" })

HEALTH CHECK:
$(if ($licenseStats -match "active:\s*(\d+)") { "üìà $($matches[1]) licences actives" } else { "‚ùì Stats licences indisponibles" })
$(if ($licenseStats -match "revoked:\s*([1-9]\d*)") { "üö´ $($matches[1]) licence(s) r√©voqu√©e(s)" } else { "‚úÖ Aucune r√©vocation" })

"@ | Out-File $licenseReport -Encoding UTF8
    
    Write-Host "‚úÖ Rapport licences: $licenseReport" -ForegroundColor Green
    
    # 2. Rapport syst√®me
    Write-Host "üíª G√©n√©ration rapport syst√®me..." -ForegroundColor White
    $systemReport = "$reportsDir\system-week$weekNumber-$year.txt"
    
    $diskInfo = Get-WmiObject -Class Win32_LogicalDisk | Where-Object {$_.DriveType -eq 3} | 
                ForEach-Object {"$($_.DeviceID) $([math]::Round($_.FreeSpace/1GB,2))GB libre / $([math]::Round($_.Size/1GB,2))GB total"}
    
    @"
=== RAPPORT SYST√àME HEBDOMADAIRE ===
Semaine: $weekNumber/$year  
Date: $reportDate

ENVIRONNEMENT:
- OS: $([System.Environment]::OSVersion.VersionString)
- PowerShell: $($PSVersionTable.PSVersion)
- Node.js: $(node --version 2>$null)
- NPM: $(npm --version 2>$null)

STOCKAGE:
$($diskInfo -join "`n")

PROJET:
- Derni√®re build: $(if(Test-Path "dist\USB-Video-Vault-*.exe") { (Get-ChildItem "dist\USB-Video-Vault-*.exe" | Select-Object -First 1).LastWriteTime } else { "Aucune" })
- Taille dist/: $(if(Test-Path "dist") { [math]::Round((Get-ChildItem "dist" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB, 2) } else { "0" }) MB
- Derni√®re MAJ code: $(git log -1 --format="%cd" --date=short 2>$null)

BACKUPS:
- Backups quotidiens: $(if(Test-Path "backups") { (Get-ChildItem "backups\issued-*.json" | Measure-Object).Count } else { "0" }) fichiers
- Derni√®re sauvegarde: $(if(Test-Path "backups") { (Get-ChildItem "backups\issued-*.json" | Sort-Object LastWriteTime -Descending | Select-Object -First 1).LastWriteTime } else { "Jamais" })

"@ | Out-File $systemReport -Encoding UTF8
    
    Write-Host "‚úÖ Rapport syst√®me: $systemReport" -ForegroundColor Green
    
    # 3. Rapport s√©curit√©
    Write-Host "üîí G√©n√©ration rapport s√©curit√©..." -ForegroundColor White
    $securityReport = "$reportsDir\security-week$weekNumber-$year.txt"
    
    $redTestResult = if (Test-Path "test-red-scenarios.mjs") { 
        try { 
            node test-red-scenarios.mjs 2>&1 | Out-String 
        } catch { 
            "Erreur ex√©cution tests rouges" 
        }
    } else { 
        "Script tests rouges non trouv√©" 
    }
    
    @"
=== RAPPORT S√âCURIT√â HEBDOMADAIRE ===
Semaine: $weekNumber/$year
Date: $reportDate

TESTS SC√âNARIOS ROUGES:
$redTestResult

AUDIT D√âPENDANCES:
$(npm audit --audit-level=moderate 2>&1 | Out-String)

RECOMMENDATIONS:
- ‚úÖ Effectuer tests s√©curit√© hebdomadaires
- ‚úÖ Maintenir d√©pendances √† jour
- ‚úÖ Surveiller CVE nouvelles
- ‚úÖ Backup s√©curit√© KEK mensuel

"@ | Out-File $securityReport -Encoding UTF8
    
    Write-Host "‚úÖ Rapport s√©curit√©: $securityReport" -ForegroundColor Green
}

function Test-LicenseHealth {
    Write-Host "`nüîë === HEALTH CHECK LICENCES ===" -ForegroundColor Magenta
    
    try {
        $stats = node tools/license-management/license-manager.mjs stats 2>$null
        
        if ($stats) {
            Write-Host "üìä Statistiques licences actuelles:" -ForegroundColor White
            Write-Host $stats
            
            # Alertes
            $alerts = @()
            
            if ($stats -match "expiring_soon:\s*([1-9]\d*)") {
                $alerts += "‚ö†Ô∏è $($matches[1]) licence(s) expirent dans 7 jours"
            }
            
            if ($stats -match "expired:\s*([1-9]\d*)") {
                $alerts += "üö´ $($matches[1]) licence(s) expir√©e(s)"
            }
            
            if ($stats -match "revoked:\s*([1-9]\d*)") {
                $alerts += "‚ùå $($matches[1]) licence(s) r√©voqu√©e(s)"
            }
            
            if ($alerts) {
                Write-Host "`nüö® Alertes d√©tect√©es:" -ForegroundColor Yellow
                $alerts | ForEach-Object { Write-Host "   $_" -ForegroundColor Yellow }
            } else {
                Write-Host "‚úÖ Toutes les licences sont en bon √©tat" -ForegroundColor Green
            }
        } else {
            Write-Host "‚ö†Ô∏è Impossible de r√©cup√©rer les stats licences" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ùå Erreur health check licences: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# ===== EXECUTION =====

$overallSuccess = $true

Write-Host "üéØ Mode ex√©cution: $(if($SecurityOnly){'S√©curit√© uniquement'}elseif($ReportsOnly){'Rapports uniquement'}else{'Complet'})" -ForegroundColor Cyan

if ($SecurityOnly -or $All) {
    $securityPassed = Test-WeeklySecurity
    $overallSuccess = $overallSuccess -and $securityPassed
    
    Test-LicenseHealth
}

if ($ReportsOnly -or $All) {
    New-WeeklyReports
}

Write-Host "`nüìä === R√âSUM√â WEEKLY OPS ===" -ForegroundColor Cyan

if ($overallSuccess) {
    Write-Host "‚úÖ Toutes les op√©rations hebdomadaires r√©ussies" -ForegroundColor Green
    Write-Host "üõ°Ô∏è S√©curit√©: VALID√âE" -ForegroundColor Green
    Write-Host "üìä Rapports: G√âN√âR√âS" -ForegroundColor Green
    Write-Host "üéØ Syst√®me: OP√âRATIONNEL" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Alertes s√©curit√© d√©tect√©es" -ForegroundColor Red
    Write-Host "üö® ACTIONS REQUISES - Consulter d√©tails ci-dessus" -ForegroundColor Red
    Write-Host "üìû Notifier √©quipe s√©curit√© si critique" -ForegroundColor Yellow
}

Write-Host "`nüìÖ Prochaine ex√©cution recommand√©e: $(Get-Date (Get-Date).AddDays(7) -Format 'yyyy-MM-dd (dddd)')" -ForegroundColor Blue
Write-Host "üïí Fin weekly ops: $(Get-Date -Format 'HH:mm:ss')" -ForegroundColor Gray