# üß™ SMOKE TEST - USB Video Vault
# Test de d√©marrage rapide de l'ex√©cutable

param(
    [string]$ExePath = ".\dist\USB-Video-Vault-0.1.0-portable.exe",
    [int]$TimeoutSeconds = 5
)

Write-Host "üöÄ === SMOKE TEST USB VIDEO VAULT ===" -ForegroundColor Green
Write-Host ""

# V√©rifier que l'ex√©cutable existe
if (-not (Test-Path $ExePath)) {
    Write-Host "‚ùå ERREUR: Ex√©cutable introuvable: $ExePath" -ForegroundColor Red
    exit 1
}

Write-Host "üìÅ Ex√©cutable: $ExePath" -ForegroundColor Cyan
Write-Host "‚è±Ô∏è Timeout: $TimeoutSeconds secondes" -ForegroundColor Cyan
Write-Host ""

# Cr√©er r√©pertoire temporaire pour les logs
$tempDir = Join-Path $env:TEMP "usbvault-smoke-test"
if (-not (Test-Path $tempDir)) {
    New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
}

$stdoutFile = Join-Path $tempDir "stdout.log"
$stderrFile = Join-Path $tempDir "stderr.log"

Write-Host "üìã Logs temporaires:" -ForegroundColor Yellow
Write-Host "   STDOUT: $stdoutFile"
Write-Host "   STDERR: $stderrFile"
Write-Host ""

try {
    Write-Host "üî• Lancement de l'application..." -ForegroundColor Yellow
    
    # Lancer le processus avec redirection
    $processInfo = New-Object System.Diagnostics.ProcessStartInfo
    $processInfo.FileName = $ExePath
    $processInfo.Arguments = "--no-sandbox --disable-gpu-sandbox --disable-dev-shm-usage"
    $processInfo.UseShellExecute = $false
    $processInfo.RedirectStandardOutput = $true
    $processInfo.RedirectStandardError = $true
    $processInfo.CreateNoWindow = $false
    
    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $processInfo
    
    # D√©marrer le processus
    $started = $process.Start()
    
    if ($started) {
        Write-Host "‚úÖ Processus d√©marr√© (PID: $($process.Id))" -ForegroundColor Green
        
        # Lire les outputs de fa√ßon asynchrone
        $stdoutTask = $process.StandardOutput.ReadToEndAsync()
        $stderrTask = $process.StandardError.ReadToEndAsync()
        
        # Attendre le timeout
        Write-Host "‚è≥ Attente de $TimeoutSeconds secondes..." -ForegroundColor Yellow
        
        $waitResult = $process.WaitForExit($TimeoutSeconds * 1000)
        
        if (-not $waitResult) {
            Write-Host "‚è∞ Timeout atteint - fermeture du processus..." -ForegroundColor Yellow
            
            # Essayer de fermer proprement
            try {
                $process.CloseMainWindow()
                Start-Sleep -Seconds 2
                
                if (-not $process.HasExited) {
                    Write-Host "üî® Fermeture forc√©e..." -ForegroundColor Orange
                    $process.Kill()
                }
            } catch {
                Write-Host "‚ö†Ô∏è Erreur lors de la fermeture: $($_.Exception.Message)" -ForegroundColor Orange
            }
        }
        
        # Attendre la fin des t√¢ches de lecture
        $stdout = ""
        $stderr = ""
        
        try {
            $stdout = $stdoutTask.GetAwaiter().GetResult()
            $stderr = $stderrTask.GetAwaiter().GetResult()
        } catch {
            Write-Host "‚ö†Ô∏è Erreur lecture outputs: $($_.Exception.Message)" -ForegroundColor Orange
        }
        
        # Sauvegarder dans les fichiers
        $stdout | Out-File -FilePath $stdoutFile -Encoding UTF8
        $stderr | Out-File -FilePath $stderrFile -Encoding UTF8
        
        Write-Host "‚úÖ Processus termin√© (Exit Code: $($process.ExitCode))" -ForegroundColor Green
        
    } else {
        throw "Impossible de d√©marrer le processus"
    }
    
} catch {
    Write-Host "‚ùå ERREUR: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
} finally {
    if ($process -and -not $process.HasExited) {
        try {
            $process.Kill()
        } catch {}
    }
    if ($process) {
        $process.Dispose()
    }
}

Write-Host ""
Write-Host "üîç === ANALYSE DES LOGS ===" -ForegroundColor Green

# Analyser STDOUT
Write-Host ""
Write-Host "üì§ STDOUT - Lignes contenant LICENSE, vault, GCM:" -ForegroundColor Cyan

if (Test-Path $stdoutFile) {
    $stdoutContent = Get-Content $stdoutFile -ErrorAction SilentlyContinue
    if ($stdoutContent) {
        $filteredStdout = $stdoutContent | Where-Object { 
            $_ -match "LICENSE|vault|GCM|error|ERROR|warning|WARNING" 
        }
        
        if ($filteredStdout) {
            $filteredStdout | ForEach-Object {
                Write-Host "   $_" -ForegroundColor White
            }
        } else {
            Write-Host "   (aucune ligne trouv√©e)" -ForegroundColor Gray
        }
        
        Write-Host "   Total lignes STDOUT: $($stdoutContent.Count)" -ForegroundColor Gray
    } else {
        Write-Host "   (STDOUT vide)" -ForegroundColor Gray
    }
} else {
    Write-Host "   (fichier STDOUT non trouv√©)" -ForegroundColor Gray
}

# Analyser STDERR
Write-Host ""
Write-Host "üì• STDERR - Lignes contenant LICENSE, vault, GCM:" -ForegroundColor Cyan

if (Test-Path $stderrFile) {
    $stderrContent = Get-Content $stderrFile -ErrorAction SilentlyContinue
    if ($stderrContent) {
        $filteredStderr = $stderrContent | Where-Object { 
            $_ -match "LICENSE|vault|GCM|error|ERROR|warning|WARNING" 
        }
        
        if ($filteredStderr) {
            $filteredStderr | ForEach-Object {
                if ($_ -match "error|ERROR") {
                    Write-Host "   $_" -ForegroundColor Red
                } elseif ($_ -match "warning|WARNING") {
                    Write-Host "   $_" -ForegroundColor Yellow
                } else {
                    Write-Host "   $_" -ForegroundColor White
                }
            }
        } else {
            Write-Host "   (aucune ligne trouv√©e)" -ForegroundColor Gray
        }
        
        Write-Host "   Total lignes STDERR: $($stderrContent.Count)" -ForegroundColor Gray
    } else {
        Write-Host "   (STDERR vide)" -ForegroundColor Gray
    }
} else {
    Write-Host "   (fichier STDERR non trouv√©)" -ForegroundColor Gray
}

Write-Host ""
Write-Host "üéØ === R√âSULTAT SMOKE TEST ===" -ForegroundColor Green

# D√©terminer le r√©sultat
$hasErrors = $false
if (Test-Path $stderrFile) {
    $stderrContent = Get-Content $stderrFile -ErrorAction SilentlyContinue
    $errors = $stderrContent | Where-Object { $_ -match "error|ERROR|fatal|FATAL" }
    if ($errors) {
        $hasErrors = $true
    }
}

if ($hasErrors) {
    Write-Host "‚ùå SMOKE TEST √âCHOU√â - Erreurs d√©tect√©es" -ForegroundColor Red
    exit 1
} else {
    Write-Host "‚úÖ SMOKE TEST R√âUSSI - Application d√©marre correctement" -ForegroundColor Green
}

Write-Host ""
Write-Host "üìÇ Logs conserv√©s dans: $tempDir" -ForegroundColor Cyan
Write-Host "üßπ Pour nettoyer: Remove-Item '$tempDir' -Recurse -Force" -ForegroundColor Gray