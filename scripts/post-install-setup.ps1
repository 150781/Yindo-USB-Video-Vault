# Script post-install pour USB Video Vault
# Cr√©e le r√©pertoire vault et installe la licence

param(
    [string]$LicenseSource = ".\license.bin",
    [string]$VaultPath = $null,
    [switch]$Force = $false,
    [switch]$Verbose = $false
)

function Write-LogMessage {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $prefix = switch ($Level) {
        "ERROR" { "[ERROR]" }
        "WARN"  { "[WARN] " }
        "OK"    { "[OK]   " }
        default { "[INFO] " }
    }
    Write-Host "[$timestamp] $prefix $Message"
}

function Get-VaultPath {
    param([string]$CustomPath)
    
    # 1. Utiliser le param√®tre personnalis√© s'il est fourni
    if ($CustomPath) {
        Write-LogMessage "Utilisation du chemin personnalis√©: $CustomPath" "INFO"
        return $CustomPath
    }
    
    # 2. V√©rifier la variable d'environnement VAULT_PATH
    $envVaultPath = $env:VAULT_PATH
    if ($envVaultPath) {
        Write-LogMessage "Utilisation de VAULT_PATH: $envVaultPath" "INFO"
        return $envVaultPath
    }
    
    # 3. Utiliser le chemin par d√©faut
    $defaultPath = Join-Path $env:USERPROFILE "Documents\Yindo-USB-Video-Vault\vault-real"
    Write-LogMessage "Utilisation du chemin par d√©faut: $defaultPath" "INFO"
    return $defaultPath
}

function Initialize-VaultDirectory {
    param([string]$VaultPath)
    
    $vaultConfigDir = Join-Path $VaultPath ".vault"
    
    try {
        # Cr√©er le r√©pertoire vault principal
        if (-not (Test-Path $VaultPath)) {
            New-Item -ItemType Directory -Force -Path $VaultPath | Out-Null
            Write-LogMessage "R√©pertoire vault cr√©√©: $VaultPath" "OK"
        } else {
            Write-LogMessage "R√©pertoire vault existe d√©j√†: $VaultPath" "INFO"
        }
        
        # Cr√©er le r√©pertoire de configuration .vault
        if (-not (Test-Path $vaultConfigDir)) {
            New-Item -ItemType Directory -Force -Path $vaultConfigDir | Out-Null
            Write-LogMessage "R√©pertoire de configuration cr√©√©: $vaultConfigDir" "OK"
        } else {
            Write-LogMessage "R√©pertoire de configuration existe d√©j√†: $vaultConfigDir" "INFO"
        }
        
        return $vaultConfigDir
        
    } catch {
        Write-LogMessage "Erreur lors de la cr√©ation des r√©pertoires: $($_.Exception.Message)" "ERROR"
        throw
    }
}

function Install-License {
    param(
        [string]$SourcePath,
        [string]$VaultConfigDir,
        [bool]$ForceOverwrite
    )
    
    $targetLicense = Join-Path $VaultConfigDir "license.bin"
    
    # V√©rifier que le fichier source existe
    if (-not (Test-Path $SourcePath)) {
        Write-LogMessage "Fichier licence source introuvable: $SourcePath" "ERROR"
        throw "Fichier licence source introuvable"
    }
    
    # V√©rifier si la licence existe d√©j√†
    if ((Test-Path $targetLicense) -and -not $ForceOverwrite) {
        Write-LogMessage "Licence existe d√©j√†. Utilisez -Force pour √©craser: $targetLicense" "WARN"
        return $false
    }
    
    try {
        # Copier la licence
        Copy-Item $SourcePath $targetLicense -Force
        
        # V√©rifier l'int√©grit√© de la copie
        $sourceSize = (Get-Item $SourcePath).Length
        $targetSize = (Get-Item $targetLicense).Length
        
        if ($sourceSize -eq $targetSize) {
            Write-LogMessage "Licence installee avec succes: $targetLicense ($targetSize bytes)" "OK"
            return $true
        } else {
            Write-LogMessage "Erreur d'integrite lors de la copie (tailles differentes)" "ERROR"
            throw "Erreur d'integrite"
        }
        
    } catch {
        Write-LogMessage "Erreur lors de l'installation de la licence: $($_.Exception.Message)" "ERROR"
        throw
    }
}

function Test-Installation {
    param([string]$VaultConfigDir)
    
    $licenseFile = Join-Path $VaultConfigDir "license.bin"
    
    if (Test-Path $licenseFile) {
        $licenseSize = (Get-Item $licenseFile).Length
        Write-LogMessage "‚úÖ Installation v√©rifi√©e - Licence: $licenseFile ($licenseSize bytes)" "OK"
        
        # Afficher les informations de la licence
        if ($Verbose) {
            $licenseInfo = Get-Item $licenseFile
            Write-LogMessage "  Cr√©√©: $($licenseInfo.CreationTime)" "INFO"
            Write-LogMessage "  Modifi√©: $($licenseInfo.LastWriteTime)" "INFO"
        }
        
        return $true
    } else {
        Write-LogMessage "‚ùå V√©rification √©chou√©e - Licence non trouv√©e" "ERROR"
        return $false
    }
}

function Set-VaultEnvironment {
    param([string]$VaultPath)
    
    try {
        # D√©finir la variable d'environnement pour l'utilisateur
        [Environment]::SetEnvironmentVariable("VAULT_PATH", $VaultPath, "User")
        Write-LogMessage "Variable d'environnement VAULT_PATH d√©finie: $VaultPath" "OK"
        
        # Mettre √† jour la session actuelle
        $env:VAULT_PATH = $VaultPath
        
    } catch {
        Write-LogMessage "Impossible de d√©finir VAULT_PATH: $($_.Exception.Message)" "WARN"
    }
}

# === EX√âCUTION PRINCIPALE ===

try {
    Write-LogMessage "=== D√âBUT DE L'INSTALLATION POST-INSTALL ===" "INFO"
    
    # 1. D√©terminer le chemin du vault
    $vaultPath = Get-VaultPath -CustomPath $VaultPath
    
    # 2. Initialiser les r√©pertoires
    $vaultConfigDir = Initialize-VaultDirectory -VaultPath $vaultPath
    
    # 3. Installer la licence
    $licenseInstalled = Install-License -SourcePath $LicenseSource -VaultConfigDir $vaultConfigDir -ForceOverwrite $Force
    
    # 4. D√©finir la variable d'environnement
    Set-VaultEnvironment -VaultPath $vaultPath
    
    # 5. V√©rifier l'installation
    $installationValid = Test-Installation -VaultConfigDir $vaultConfigDir
    
    if ($installationValid) {
        Write-LogMessage "=== INSTALLATION POST-INSTALL TERMIN√âE AVEC SUCC√àS ===" "OK"
        Write-LogMessage "Vault configur√©: $vaultPath" "INFO"
        Write-LogMessage "Licence install√©e: $(Join-Path $vaultConfigDir 'license.bin')" "INFO"
        
        # Instructions pour l'utilisateur
        Write-Host ""
        Write-Host "üìã INSTRUCTIONS:" -ForegroundColor Cyan
        Write-Host "   ‚Ä¢ Le vault est configur√© dans: $vaultPath" -ForegroundColor White
        Write-Host "   ‚Ä¢ Variable VAULT_PATH d√©finie automatiquement" -ForegroundColor White
        Write-Host "   ‚Ä¢ Red√©marrez votre terminal pour prendre en compte VAULT_PATH" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ L'application USB Video Vault peut maintenant √™tre lanc√©e" -ForegroundColor Green
        
    } else {
        Write-LogMessage "=== ECHEC DE L'INSTALLATION POST-INSTALL ===" "ERROR"
        exit 1
    }
    
} catch {
    Write-LogMessage "ERREUR CRITIQUE: $($_.Exception.Message)" "ERROR"
    Write-LogMessage "Installation post-install echouee" "ERROR"
    exit 1
}